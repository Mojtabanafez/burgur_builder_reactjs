{"ast":null,"code":"var _jsxFileName = \"/home/mojtaba/Desktop/Burgur_Builder/burgur_builder/src/containers/Orders/Orders.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Order from '../../components/Order/Order';\nimport axios from '../../axios-orders';\nimport withErrorHandler from '../../hoc/withErrorHandler/withErrorHandler';\nimport Spinner from '../../components/UI/Spinner/Spinner';\nimport * as actions from '../../store/actions/index';\n\nclass Orders extends Component {\n  componentDidMount() {\n    this.props.onFetchOrders();\n  }\n\n  render() {\n    let orders = React.createElement(Spinner, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16\n      },\n      __self: this\n    });\n\n    if (!this.props.loading) {\n      console.log(this.props.orders);\n      orders = this.props.orders.map(order => React.createElement(Order, {\n        key: order.id,\n        ingredients: order.ingredients,\n        price: order.price,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 20\n        },\n        __self: this\n      }));\n    }\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27\n      },\n      __self: this\n    }, orders);\n  }\n\n}\n\n;\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onFetchOrders: to => dispatch(actions.fetchOrders())\n  };\n};\n\nconst mapStateToProps = state => {\n  return {\n    orders: state.order.orders,\n    loading: state.order.loading\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(Orders, axios));","map":{"version":3,"sources":["/home/mojtaba/Desktop/Burgur_Builder/burgur_builder/src/containers/Orders/Orders.js"],"names":["React","Component","connect","Order","axios","withErrorHandler","Spinner","actions","Orders","componentDidMount","props","onFetchOrders","render","orders","loading","console","log","map","order","id","ingredients","price","mapDispatchToProps","dispatch","to","fetchOrders","mapStateToProps","state"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,KAAP,MAAkB,8BAAlB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAOC,gBAAP,MAA6B,6CAA7B;AACA,OAAOC,OAAP,MAAoB,qCAApB;AACA,OAAO,KAAKC,OAAZ,MAAyB,2BAAzB;;AAEA,MAAMC,MAAN,SAAqBP,SAArB,CAA+B;AAE3BQ,EAAAA,iBAAiB,GAAG;AAChB,SAAKC,KAAL,CAAWC,aAAX;AACH;;AAEDC,EAAAA,MAAM,GAAG;AACL,QAAIC,MAAM,GAAE,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAZ;;AACA,QAAI,CAAC,KAAKH,KAAL,CAAWI,OAAhB,EAAyB;AACrBC,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKN,KAAL,CAAWG,MAAvB;AACAA,MAAAA,MAAM,GAAG,KAAKH,KAAL,CAAWG,MAAX,CAAkBI,GAAlB,CAAsBC,KAAK,IAChC,oBAAC,KAAD;AACI,QAAA,GAAG,EAAEA,KAAK,CAACC,EADf;AAEI,QAAA,WAAW,EAAED,KAAK,CAACE,WAFvB;AAGI,QAAA,KAAK,EAAEF,KAAK,CAACG,KAHjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADK,CAAT;AAMH;;AACD,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKR,MADL,CADJ;AAKH;;AAtB0B;;AAuB9B;;AAED,MAAMS,kBAAkB,GAAGC,QAAQ,IAAI;AACnC,SAAO;AACHZ,IAAAA,aAAa,EAAGa,EAAD,IAAQD,QAAQ,CAAChB,OAAO,CAACkB,WAAR,EAAD;AAD5B,GAAP;AAGH,CAJD;;AAKA,MAAMC,eAAe,GAAGC,KAAK,IAAI;AAC7B,SAAO;AACHd,IAAAA,MAAM,EAAEc,KAAK,CAACT,KAAN,CAAYL,MADjB;AAEHC,IAAAA,OAAO,EAACa,KAAK,CAACT,KAAN,CAAYJ;AAFjB,GAAP;AAIH,CALD;;AAMA,eAAeZ,OAAO,CAACwB,eAAD,EAAkBJ,kBAAlB,CAAP,CAA6CjB,gBAAgB,CAACG,MAAD,EAASJ,KAAT,CAA7D,CAAf","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Order from '../../components/Order/Order';\nimport axios from '../../axios-orders';\nimport withErrorHandler from '../../hoc/withErrorHandler/withErrorHandler';\nimport Spinner from '../../components/UI/Spinner/Spinner'\nimport * as actions from '../../store/actions/index'\n\nclass Orders extends Component {\n\n    componentDidMount() {\n        this.props.onFetchOrders();\n    }\n\n    render() {\n        let orders= <Spinner />;\n        if (!this.props.loading) {\n            console.log(this.props.orders); \n            orders = this.props.orders.map(order => (\n                <Order\n                    key={order.id}\n                    ingredients={order.ingredients}\n                    price={order.price} />\n            ))\n        }\n        return (\n            <div>\n                {orders}\n            </div>\n        );\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onFetchOrders: (to) => dispatch(actions.fetchOrders())\n    }\n}\nconst mapStateToProps = state => {\n    return {\n        orders: state.order.orders,\n        loading:state.order.loading\n    }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(Orders, axios));"]},"metadata":{},"sourceType":"module"}