{"ast":null,"code":"import _defineProperty from \"/home/mojtaba/Desktop/Burgur_Builder/burgur_builder/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/home/mojtaba/Desktop/Burgur_Builder/burgur_builder/src/containers/Auth/Auth.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from \"react\";\nimport Input from \"../../components/UI/Input/Input\";\nimport Button from \"../../components/UI/Button/Button\";\nimport classes from \"./Auth.module.css\";\nimport * as actions from \"../../store/actions/index\";\nimport { connect } from \"react-redux\";\nimport Spinner from \"../../components/UI/Spinner/Spinner\";\nimport { Redirect } from \"react-router-dom\";\n\nclass Auth extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      controls: {\n        email: {\n          elementType: \"input\",\n          elementConfig: {\n            type: \"email\",\n            placeholder: \"Mail Address\"\n          },\n          vlaue: \"\",\n          validation: {\n            required: true,\n            isEmail: true\n          },\n          valid: false,\n          touched: false\n        },\n        password: {\n          elementType: \"input\",\n          elementConfig: {\n            type: \"password\",\n            placeholder: \"Password\"\n          },\n          vlaue: \"\",\n          validation: {\n            required: true,\n            minLength: 6\n          },\n          valid: false,\n          touched: false\n        }\n      },\n      isSignup: true\n    };\n\n    this.inputChangeHandler = (event, controlName) => {\n      const updatedControls = _objectSpread({}, this.state.controls, {\n        [controlName]: _objectSpread({}, this.state.controls[controlName], {\n          value: event.target.value,\n          valid: this.checkValidity(event.target.value, this.state.controls[controlName].validation),\n          touched: true\n        })\n      });\n\n      this.setState({\n        controls: updatedControls\n      });\n    };\n\n    this.submitHandler = event => {\n      event.preventDefault();\n      this.props.onAuth(this.state.controls.email.value, this.state.controls.password.value, this.state.isSignup);\n    };\n\n    this.switchAuthModeHandler = () => {\n      this.setState(prevState => {\n        return {\n          isSignup: !prevState.isSignup\n        };\n      });\n    };\n  }\n\n  checkValidity(value, rules) {\n    let isValid = true;\n\n    if (!rules) {\n      return true;\n    }\n\n    if (rules.required) {\n      isValid = value.trim() !== \"\" && isValid;\n    }\n\n    if (rules.minLength) {\n      isValid = value.length >= rules.minLength && isValid;\n    }\n\n    if (rules.maxLength) {\n      isValid = value.length <= rules.maxLength && isValid;\n    }\n\n    if (rules.isEmail) {\n      const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\n      isValid = pattern.test(value) && isValid;\n    }\n\n    if (rules.isNumeric) {\n      const pattern = /^\\d+$/;\n      isValid = pattern.test(value) && isValid;\n    }\n\n    return isValid;\n  }\n\n  render() {\n    const formElementsArray = [];\n\n    for (let key in this.state.controls) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.controls[key]\n      });\n    }\n\n    let form = formElementsArray.map(formElement => React.createElement(Input, {\n      key: formElement.id,\n      elementType: formElement.config.elementType,\n      elementConfig: formElement.config.elementConfig,\n      value: formElement.config.value,\n      invalid: !formElement.config.valid,\n      shouldValidate: formElement.config.validation,\n      touched: formElement.config.touched,\n      changed: event => this.inputChangeHandler(event, formElement.id),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }));\n\n    if (this.props.loading) {\n      form = React.createElement(Spinner, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126\n        },\n        __self: this\n      });\n    }\n\n    let errorMessage = null;\n\n    if (this.props.error) {\n      errorMessage = React.createElement(\"p\", {\n        style: {\n          color: \"red\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        },\n        __self: this\n      }, this.props.error);\n    }\n\n    let authRedirect = null;\n\n    if (this.props.isAuthenticated) {\n      authRedirect = React.createElement(Redirect, {\n        to: \"/\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137\n        },\n        __self: this\n      });\n    }\n\n    return React.createElement(\"div\", {\n      className: classes.Auth,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, authRedirect, errorMessage, React.createElement(\"form\", {\n      onSubmit: this.submitHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }, form, React.createElement(Button, {\n      btnType: \"Success\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }, \"Submit\")), React.createElement(Button, {\n      clicked: this.switchAuthModeHandler,\n      btnType: \"Danger\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }, \"SWITCH TO \", this.state.isSignup ? \"SIGNIN\" : \"SIGNUP\"));\n  }\n\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onAuth: (email, password, isSignup) => dispatch(actions.auth(email, password, isSignup))\n  };\n};\n\nconst mapStateToProps = state => {\n  return {\n    loading: state.auth.loading,\n    error: state.auth.error,\n    isAuthenticated: state.auth.token !== null\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);","map":{"version":3,"sources":["/home/mojtaba/Desktop/Burgur_Builder/burgur_builder/src/containers/Auth/Auth.js"],"names":["React","Component","Input","Button","classes","actions","connect","Spinner","Redirect","Auth","state","controls","email","elementType","elementConfig","type","placeholder","vlaue","validation","required","isEmail","valid","touched","password","minLength","isSignup","inputChangeHandler","event","controlName","updatedControls","value","target","checkValidity","setState","submitHandler","preventDefault","props","onAuth","switchAuthModeHandler","prevState","rules","isValid","trim","length","maxLength","pattern","test","isNumeric","render","formElementsArray","key","push","id","config","form","map","formElement","loading","errorMessage","error","color","authRedirect","isAuthenticated","mapDispatchToProps","dispatch","auth","mapStateToProps","token"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Input from \"../../components/UI/Input/Input\";\nimport Button from \"../../components/UI/Button/Button\";\nimport classes from \"./Auth.module.css\";\nimport * as actions from \"../../store/actions/index\";\nimport { connect } from \"react-redux\";\nimport Spinner from \"../../components/UI/Spinner/Spinner\";\nimport { Redirect } from \"react-router-dom\";\n\nclass Auth extends Component {\n  state = {\n    controls: {\n      email: {\n        elementType: \"input\",\n        elementConfig: {\n          type: \"email\",\n          placeholder: \"Mail Address\"\n        },\n        vlaue: \"\",\n        validation: {\n          required: true,\n          isEmail: true\n        },\n        valid: false,\n        touched: false\n      },\n\n      password: {\n        elementType: \"input\",\n        elementConfig: {\n          type: \"password\",\n          placeholder: \"Password\"\n        },\n        vlaue: \"\",\n        validation: {\n          required: true,\n          minLength: 6\n        },\n        valid: false,\n        touched: false\n      }\n    },\n    isSignup: true\n  };\n\n  checkValidity(value, rules) {\n    let isValid = true;\n    if (!rules) {\n      return true;\n    }\n\n    if (rules.required) {\n      isValid = value.trim() !== \"\" && isValid;\n    }\n\n    if (rules.minLength) {\n      isValid = value.length >= rules.minLength && isValid;\n    }\n\n    if (rules.maxLength) {\n      isValid = value.length <= rules.maxLength && isValid;\n    }\n\n    if (rules.isEmail) {\n      const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\n      isValid = pattern.test(value) && isValid;\n    }\n\n    if (rules.isNumeric) {\n      const pattern = /^\\d+$/;\n      isValid = pattern.test(value) && isValid;\n    }\n    return isValid;\n  }\n\n  inputChangeHandler = (event, controlName) => {\n    const updatedControls = {\n      ...this.state.controls,\n      [controlName]: {\n        ...this.state.controls[controlName],\n        value: event.target.value,\n        valid: this.checkValidity(\n          event.target.value,\n          this.state.controls[controlName].validation\n        ),\n        touched: true\n      }\n    };\n    this.setState({ controls: updatedControls });\n  };\n  submitHandler = event => {\n    event.preventDefault();\n    this.props.onAuth(\n      this.state.controls.email.value,\n      this.state.controls.password.value,\n      this.state.isSignup\n    );\n  };\n  switchAuthModeHandler = () => {\n    this.setState(prevState => {\n      return { isSignup: !prevState.isSignup };\n    });\n  };\n  render() {\n    const formElementsArray = [];\n    for (let key in this.state.controls) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.controls[key]\n      });\n    }\n    let form = formElementsArray.map(formElement => (\n      <Input\n        key={formElement.id}\n        elementType={formElement.config.elementType}\n        elementConfig={formElement.config.elementConfig}\n        value={formElement.config.value}\n        invalid={!formElement.config.valid}\n        shouldValidate={formElement.config.validation}\n        touched={formElement.config.touched}\n        changed={event => this.inputChangeHandler(event, formElement.id)}\n      />\n    ));\n\n    if (this.props.loading) {\n      form = <Spinner />;\n    }\n\n    let errorMessage = null;\n\n    if (this.props.error) {\n      errorMessage = <p style={{ color: \"red\" }}>{this.props.error}</p>;\n    }\n\n    let authRedirect = null;\n    if (this.props.isAuthenticated) {\n      authRedirect = <Redirect to=\"/\" />;\n    }\n\n    return (\n      <div className={classes.Auth}>\n          {authRedirect}\n        {errorMessage}\n        <form onSubmit={this.submitHandler}>\n          {form}\n          <Button btnType=\"Success\">Submit</Button>\n        </form>\n        <Button clicked={this.switchAuthModeHandler} btnType=\"Danger\">\n          SWITCH TO {this.state.isSignup ? \"SIGNIN\" : \"SIGNUP\"}\n        </Button>\n      </div>\n    );\n  }\n}\nconst mapDispatchToProps = dispatch => {\n  return {\n    onAuth: (email, password, isSignup) =>\n      dispatch(actions.auth(email, password, isSignup))\n  };\n};\nconst mapStateToProps = state => {\n  return {\n    loading: state.auth.loading,\n    error: state.auth.error,\n    isAuthenticated: state.auth.token !== null\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Auth);\n"]},"metadata":{},"sourceType":"module"}