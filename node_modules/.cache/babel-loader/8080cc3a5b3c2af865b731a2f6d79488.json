{"ast":null,"code":"import _defineProperty from \"/home/mojtaba/Desktop/Burgur_Builder/burgur_builder/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/home/mojtaba/Desktop/Burgur_Builder/burgur_builder/src/containers/Checkout/ContactData/ContactData.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from 'react';\nimport Button from '../../../components/UI/Button/Button';\nimport classes from './ContactData.module.css';\nimport axios from '../../../axios-orders';\nimport Spinner from '../../../components/UI/Spinner/Spinner';\nimport Input from '../../../components/UI/Input/Input';\n\nclass ContactData extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      orderForm: {\n        name: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Your Name'\n          },\n          vlaue: ''\n        },\n        street: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Street'\n          },\n          vlaue: ''\n        },\n        zipCode: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'ZIP Code'\n          },\n          vlaue: ''\n        },\n        country: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Country'\n          },\n          vlaue: ''\n        },\n        email: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'email',\n            placeholder: 'Your Mail'\n          },\n          vlaue: ''\n        },\n        deliveryMethod: {\n          elementType: 'select',\n          elementConfig: {\n            options: [{\n              vlaue: 'fastest',\n              displayValue: 'Fastest'\n            }, {\n              vlaue: 'cheapest',\n              displayValue: 'Cheapest'\n            }]\n          },\n          vlaue: ''\n        }\n      },\n      loading: false\n    };\n\n    this.orderHandler = event => {\n      event.preventDefault();\n      this.setState({\n        loading: true\n      });\n      const order = {\n        ingredients: this.props.ingredients,\n        price: this.props.price\n      };\n      axios.post('/orders.json', order).then(response => {\n        this.setState({\n          loading: false\n        });\n        this.props.history.push('/');\n      }).catch(error => {\n        this.setState({\n          loading: false\n        });\n      });\n    };\n\n    this.inputChangeHandler = (event, inputIdentifier) => {\n      const updatedOrderForm = _objectSpread({}, this.state.orderForm);\n\n      const updatedFormElement = _objectSpread({}, updatedOrderForm[inputIdentifier]);\n    };\n  }\n\n  render() {\n    const formElementsArray = [];\n\n    for (let key in this.state.orderForm) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.orderForm[key]\n      });\n    }\n\n    let form = React.createElement(\"form\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, React.createElement(Input, {\n      elementType: \"..\",\n      elementConfig: \"..\",\n      value: \"..\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }), formElementsArray.map(formElement => React.createElement(Input, {\n      key: formElement.id,\n      elementType: formElement.config.elementType,\n      elementConfig: formElement.config.elementConfig,\n      value: formElement.config.value // changed={(event) => this.inputChangeHandler(event, formElement.id)}\n      ,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    })), React.createElement(Button, {\n      btntype: \"Success\",\n      clicked: this.orderHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, \"ORDER\"));\n\n    if (this.state.loading) {\n      form = React.createElement(Spinner, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      });\n    }\n\n    return React.createElement(\"div\", {\n      className: classes.ContactData,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, \"Enter your Contact Data\"), form);\n  }\n\n}\n\nexport default ContactData;","map":{"version":3,"sources":["/home/mojtaba/Desktop/Burgur_Builder/burgur_builder/src/containers/Checkout/ContactData/ContactData.js"],"names":["React","Component","Button","classes","axios","Spinner","Input","ContactData","state","orderForm","name","elementType","elementConfig","type","placeholder","vlaue","street","zipCode","country","email","deliveryMethod","options","displayValue","loading","orderHandler","event","preventDefault","setState","order","ingredients","props","price","post","then","response","history","push","catch","error","inputChangeHandler","inputIdentifier","updatedOrderForm","updatedFormElement","render","formElementsArray","key","id","config","form","map","formElement","value"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Button from '../../../components/UI/Button/Button'\nimport classes from './ContactData.module.css'\nimport axios from '../../../axios-orders';\nimport Spinner from '../../../components/UI/Spinner/Spinner'\nimport Input from '../../../components/UI/Input/Input'\n\n\nclass ContactData extends Component {\n    state = {\n        orderForm: {\n            name: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Your Name',\n                },\n                vlaue: '',\n            },\n            street: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Street',\n                },\n                vlaue: '',\n            },\n            zipCode: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'ZIP Code',\n                },\n                vlaue: '',\n            },\n            country: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Country',\n                },\n                vlaue: '',\n            },\n            email: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'email',\n                    placeholder: 'Your Mail',\n                },\n                vlaue: '',\n            },\n            deliveryMethod: {\n                elementType: 'select',\n                elementConfig: {\n                    options: [\n                        { vlaue: 'fastest', displayValue: 'Fastest' },\n                        { vlaue: 'cheapest', displayValue: 'Cheapest' }\n                    ],\n                },\n                vlaue: '',\n            },\n        },\n        loading: false,\n    }\n    orderHandler = (event) => {\n        event.preventDefault();\n        this.setState({ loading: true });\n        const order = {\n            ingredients: this.props.ingredients,\n            price: this.props.price,\n\n\n        }\n\n        axios.post('/orders.json', order)\n            .then(response => {\n                this.setState({ loading: false });\n                this.props.history.push('/');\n            })\n            .catch(error => {\n                this.setState({ loading: false });\n            });\n    }\n\n    inputChangeHandler = (event, inputIdentifier) => {\n        const updatedOrderForm = {\n            ...this.state.orderForm\n        };\n        const updatedFormElement = {\n            ...updatedOrderForm[inputIdentifier]\n        };\n    }\n\n    render() {\n        const formElementsArray = [];\n        for (let key in this.state.orderForm) {\n            formElementsArray.push({\n                id: key,\n                config: this.state.orderForm[key]\n            })\n        }\n\n        let form = (\n            <form>\n                <Input elementType=\"..\" elementConfig=\"..\" value=\"..\" />\n                {formElementsArray.map(formElement => (\n                    <Input\n                        key={formElement.id}\n                        elementType={formElement.config.elementType}\n                        elementConfig={formElement.config.elementConfig}\n                        value={formElement.config.value}\n                    // changed={(event) => this.inputChangeHandler(event, formElement.id)}\n                    />\n                ))}\n                <Button btntype=\"Success\" clicked={this.orderHandler}>ORDER</Button >\n            </form>\n        );\n        if (this.state.loading) {\n            form = <Spinner />;\n        }\n        return (\n            <div className={classes.ContactData}>\n                <h4>Enter your Contact Data</h4>\n                {form}\n            </div>\n        );\n    }\n}\n\nexport default ContactData;"]},"metadata":{},"sourceType":"module"}