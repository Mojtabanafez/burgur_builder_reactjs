{"ast":null,"code":"var _jsxFileName = \"/home/mojtaba/Desktop/Burgur_Builder/burgur_builder/src/containers/Checkout/ContactData/ContactData.js\";\nimport React, { Component } from \"react\";\nimport Button from \"../../../components/UI/Button/Button\";\nimport classes from \"./ContactData.module.css\";\nimport axios from \"../../../axios-orders\";\nimport Spinner from \"../../../components/UI/Spinner/Spinner\";\nimport Input from \"../../../components/UI/Input/Input\";\nimport { connect } from \"react-redux\";\nimport withErrorHandler from \"../../../hoc/withErrorHandler/withErrorHandler\";\nimport * as actions from \"../../../store/actions/index\";\nimport { updateObject, checkValidity } from \"../../../shared/utility\";\n\nclass ContactData extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      orderForm: {\n        name: {\n          elementType: \"input\",\n          elementConfig: {\n            type: \"text\",\n            placeholder: \"Your Name\"\n          },\n          vlaue: \"\",\n          validation: {\n            required: true\n          },\n          valid: true,\n          touched: false\n        },\n        street: {\n          elementType: \"input\",\n          elementConfig: {\n            type: \"text\",\n            placeholder: \"Street\"\n          },\n          vlaue: \"\",\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        zipCode: {\n          elementType: \"input\",\n          elementConfig: {\n            type: \"text\",\n            placeholder: \"ZIP Code\"\n          },\n          vlaue: \"\",\n          validation: {\n            required: true,\n            minLength: 5,\n            maxLength: 5\n          },\n          valid: false,\n          touched: false\n        },\n        country: {\n          elementType: \"input\",\n          elementConfig: {\n            type: \"text\",\n            placeholder: \"Country\"\n          },\n          vlaue: \"\",\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        email: {\n          elementType: \"input\",\n          elementConfig: {\n            type: \"email\",\n            placeholder: \"Your Mail\"\n          },\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        deliveryMethod: {\n          elementType: \"select\",\n          elementConfig: {\n            options: [{\n              value: \"fastest\",\n              displayValue: \"Fastest\"\n            }, {\n              value: \"cheapest\",\n              displayValue: \"Cheapest\"\n            }]\n          },\n          vlaue: \"fastest\",\n          validation: false,\n          valid: true\n        }\n      },\n      formIsValid: false\n    };\n\n    this.orderHandler = event => {\n      event.preventDefault();\n      const formData = {};\n\n      for (let formElementIdentifier in this.state.orderForm) {\n        formData[formElementIdentifier] = this.state.orderForm[formElementIdentifier].value;\n      }\n\n      const order = {\n        ingredients: this.props.ings,\n        price: this.props.price,\n        orderData: formData,\n        userId: this.props.userId\n      };\n      this.props.onOrderBurger(order, this.props.token);\n    };\n\n    this.inputChangeHandler = (event, inputIdentifier) => {\n      const updatedFormElement = updateObject(this.state.orderForm[inputIdentifier], {\n        value: event.target.value,\n        touched: true,\n        valid: this.checkValidity(event.target.value, this.state.orderForm[inputIdentifier].validation)\n      });\n      const updatedOrderForm = updateObject(this.state.orderForm, {\n        [inputIdentifier]: updatedFormElement\n      });\n      let formIsValid = true;\n\n      for (let inputIdentifier in updatedOrderForm) {\n        formIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid;\n      }\n\n      this.setState({\n        orderForm: updatedOrderForm,\n        formIsValid: formIsValid\n      });\n    };\n  }\n\n  render() {\n    const formElementsArray = [];\n\n    for (let key in this.state.orderForm) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.orderForm[key]\n      });\n    }\n\n    let form = React.createElement(\"form\", {\n      onSubmit: this.orderHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }, formElementsArray.map(formElement => React.createElement(Input, {\n      key: formElement.id,\n      elementType: formElement.config.elementType,\n      elementConfig: formElement.config.elementConfig,\n      value: formElement.config.value,\n      invalid: !formElement.config.valid,\n      shouldValidate: formElement.config.validation,\n      touched: formElement.config.touched,\n      changed: event => this.inputChangeHandler(event, formElement.id),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    })), React.createElement(Button, {\n      btntype: \"Success\",\n      clicked: this.orderHandler,\n      disabled: !this.state.formIsValid,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    }, \"ORDER\"));\n\n    if (this.props.loading) {\n      form = React.createElement(Spinner, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176\n        },\n        __self: this\n      });\n    }\n\n    return React.createElement(\"div\", {\n      className: classes.ContactData,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    }, \"Enter your Contact Data\"), form);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    ings: state.burgerBuilder.ingredients,\n    price: state.burgerBuilder.totalPrice,\n    loading: state.order.loading,\n    token: state.auth.token,\n    userId: state.auth.userId\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onOrderBurger: (orderData, token) => dispatch(actions.purchaseBurger(orderData, token))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(ContactData, axios));","map":{"version":3,"sources":["/home/mojtaba/Desktop/Burgur_Builder/burgur_builder/src/containers/Checkout/ContactData/ContactData.js"],"names":["React","Component","Button","classes","axios","Spinner","Input","connect","withErrorHandler","actions","updateObject","checkValidity","ContactData","state","orderForm","name","elementType","elementConfig","type","placeholder","vlaue","validation","required","valid","touched","street","zipCode","minLength","maxLength","country","email","deliveryMethod","options","value","displayValue","formIsValid","orderHandler","event","preventDefault","formData","formElementIdentifier","order","ingredients","props","ings","price","orderData","userId","onOrderBurger","token","inputChangeHandler","inputIdentifier","updatedFormElement","target","updatedOrderForm","setState","render","formElementsArray","key","push","id","config","form","map","formElement","loading","mapStateToProps","burgerBuilder","totalPrice","auth","mapDispatchToProps","dispatch","purchaseBurger"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Button from \"../../../components/UI/Button/Button\";\nimport classes from \"./ContactData.module.css\";\nimport axios from \"../../../axios-orders\";\nimport Spinner from \"../../../components/UI/Spinner/Spinner\";\nimport Input from \"../../../components/UI/Input/Input\";\nimport { connect } from \"react-redux\";\nimport withErrorHandler from \"../../../hoc/withErrorHandler/withErrorHandler\";\nimport * as actions from \"../../../store/actions/index\";\nimport { updateObject, checkValidity } from \"../../../shared/utility\";\n\nclass ContactData extends Component {\n  state = {\n    orderForm: {\n      name: {\n        elementType: \"input\",\n        elementConfig: {\n          type: \"text\",\n          placeholder: \"Your Name\"\n        },\n        vlaue: \"\",\n        validation: {\n          required: true\n        },\n        valid: true,\n        touched: false\n      },\n      street: {\n        elementType: \"input\",\n        elementConfig: {\n          type: \"text\",\n          placeholder: \"Street\"\n        },\n        vlaue: \"\",\n        validation: {\n          required: true\n        },\n        valid: false,\n        touched: false\n      },\n      zipCode: {\n        elementType: \"input\",\n        elementConfig: {\n          type: \"text\",\n          placeholder: \"ZIP Code\"\n        },\n        vlaue: \"\",\n        validation: {\n          required: true,\n          minLength: 5,\n          maxLength: 5\n        },\n        valid: false,\n        touched: false\n      },\n      country: {\n        elementType: \"input\",\n        elementConfig: {\n          type: \"text\",\n          placeholder: \"Country\"\n        },\n        vlaue: \"\",\n        validation: {\n          required: true\n        },\n        valid: false,\n        touched: false\n      },\n      email: {\n        elementType: \"input\",\n        elementConfig: {\n          type: \"email\",\n          placeholder: \"Your Mail\"\n        },\n        validation: {\n          required: true\n        },\n        valid: false,\n        touched: false\n      },\n      deliveryMethod: {\n        elementType: \"select\",\n        elementConfig: {\n          options: [\n            { value: \"fastest\", displayValue: \"Fastest\" },\n            { value: \"cheapest\", displayValue: \"Cheapest\" }\n          ]\n        },\n        vlaue: \"fastest\",\n        validation: false,\n        valid: true\n      }\n    },\n    formIsValid: false\n  };\n\n  orderHandler = event => {\n    event.preventDefault();\n    const formData = {};\n    for (let formElementIdentifier in this.state.orderForm) {\n      formData[formElementIdentifier] = this.state.orderForm[\n        formElementIdentifier\n      ].value;\n    }\n    const order = {\n      ingredients: this.props.ings,\n      price: this.props.price,\n      orderData: formData,\n      userId: this.props.userId\n    };\n    this.props.onOrderBurger(order, this.props.token);\n  };\n\n  \n\n  inputChangeHandler = (event, inputIdentifier) => {\n    \n    \n    const updatedFormElement = updateObject(\n      this.state.orderForm[inputIdentifier],\n      {\n        value: event.target.value,\n        touched : true,\n        valid :this.checkValidity(\n         event.target.value, this.state.orderForm[inputIdentifier].validation)\n      }\n    );\n    const updatedOrderForm = updateObject(this.state.orderForm, {\n        [inputIdentifier] : updatedFormElement\n    })\n\n    let formIsValid = true;\n    for (let inputIdentifier in updatedOrderForm) {\n      formIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid;\n    }\n\n    this.setState({\n      orderForm: updatedOrderForm,\n      formIsValid: formIsValid\n    });\n  };\n\n  render() {\n    const formElementsArray = [];\n    for (let key in this.state.orderForm) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.orderForm[key]\n      });\n    }\n\n    let form = (\n      <form onSubmit={this.orderHandler}>\n        {formElementsArray.map(formElement => (\n          <Input\n            key={formElement.id}\n            elementType={formElement.config.elementType}\n            elementConfig={formElement.config.elementConfig}\n            value={formElement.config.value}\n            invalid={!formElement.config.valid}\n            shouldValidate={formElement.config.validation}\n            touched={formElement.config.touched}\n            changed={event => this.inputChangeHandler(event, formElement.id)}\n          />\n        ))}\n        <Button\n          btntype=\"Success\"\n          clicked={this.orderHandler}\n          disabled={!this.state.formIsValid}\n        >\n          ORDER\n        </Button>\n      </form>\n    );\n    if (this.props.loading) {\n      form = <Spinner />;\n    }\n    return (\n      <div className={classes.ContactData}>\n        <h4>Enter your Contact Data</h4>\n        {form}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    ings: state.burgerBuilder.ingredients,\n    price: state.burgerBuilder.totalPrice,\n    loading: state.order.loading,\n    token: state.auth.token,\n    userId: state.auth.userId\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onOrderBurger: (orderData, token) =>\n      dispatch(actions.purchaseBurger(orderData, token))\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(withErrorHandler(ContactData, axios));\n"]},"metadata":{},"sourceType":"module"}