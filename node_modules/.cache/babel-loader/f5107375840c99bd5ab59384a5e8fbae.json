{"ast":null,"code":"import _defineProperty from \"/home/mojtaba/Desktop/Burgur_Builder/burgur_builder/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport * as actionType from '../asctions/actionTypes';\nconst initialState = {\n  ingredients: {\n    salad: 0,\n    bacon: 0,\n    cheese: 0,\n    meat: 0\n  },\n  totalPrice: 4\n};\nconst INGREDIENT_PRICES = {\n  salad: 0.5,\n  cheese: 0.4,\n  meat: 1.3,\n  bacon: 0.7\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actionType.ADD_INGREDIENTS:\n      return _objectSpread({}, state, {\n        ingredients: _objectSpread({}, state.ingredients, {\n          [action.ingredientName]: state.ingredients[action.ingredientName] + 1\n        }),\n        totalPrice: state.totalPrice + INGREDIENT_PRICES[action.ingredientName]\n      });\n\n    case actionType.REMOVE_INGREDIENTS:\n      return _objectSpread({}, state, {\n        ingredients: _objectSpread({}, state.ingredients, {\n          [action.ingredientName]: state.ingredients[action.ingredientName] - 1\n        }),\n        totalPrice: state.totalPrice - INGREDIENT_PRICES[action.ingredientName]\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/home/mojtaba/Desktop/Burgur_Builder/burgur_builder/src/store/reducers/burgerBuilder.js"],"names":["actionType","initialState","ingredients","salad","bacon","cheese","meat","totalPrice","INGREDIENT_PRICES","reducer","state","action","type","ADD_INGREDIENTS","ingredientName","REMOVE_INGREDIENTS"],"mappings":";;;;;;AAAA,OAAO,KAAKA,UAAZ,MAA4B,yBAA5B;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,WAAW,EAAE;AACTC,IAAAA,KAAK,EAAC,CADG;AAETC,IAAAA,KAAK,EAAC,CAFG;AAGTC,IAAAA,MAAM,EAAC,CAHE;AAITC,IAAAA,IAAI,EAAC;AAJI,GADI;AAOjBC,EAAAA,UAAU,EAAE;AAPK,CAArB;AAUA,MAAMC,iBAAiB,GAAG;AACtBL,EAAAA,KAAK,EAAE,GADe;AAEtBE,EAAAA,MAAM,EAAE,GAFc;AAGtBC,EAAAA,IAAI,EAAE,GAHgB;AAItBF,EAAAA,KAAK,EAAE;AAJe,CAA1B;;AAOA,MAAMK,OAAO,GAAG,CAACC,KAAK,GAAGT,YAAT,EAAuBU,MAAvB,KAAkC;AAC9C,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKZ,UAAU,CAACa,eAAhB;AACI,+BACOH,KADP;AAEIR,QAAAA,WAAW,oBACJQ,KAAK,CAACR,WADF;AAEP,WAACS,MAAM,CAACG,cAAR,GAAwBJ,KAAK,CAACR,WAAN,CAAkBS,MAAM,CAACG,cAAzB,IAAyC;AAF1D,UAFf;AAMIP,QAAAA,UAAU,EAACG,KAAK,CAACH,UAAN,GAAmBC,iBAAiB,CAACG,MAAM,CAACG,cAAR;AANnD;;AAQJ,SAAKd,UAAU,CAACe,kBAAhB;AACI,+BACOL,KADP;AAEIR,QAAAA,WAAW,oBACJQ,KAAK,CAACR,WADF;AAEP,WAACS,MAAM,CAACG,cAAR,GAAyBJ,KAAK,CAACR,WAAN,CAAkBS,MAAM,CAACG,cAAzB,IAA2C;AAF7D,UAFf;AAMIP,QAAAA,UAAU,EAAEG,KAAK,CAACH,UAAN,GAAmBC,iBAAiB,CAACG,MAAM,CAACG,cAAR;AANpD;;AAQJ;AACI,aAAOJ,KAAP;AApBR;AAsBH,CAvBD;;AAyBA,eAAeD,OAAf","sourcesContent":["import * as actionType from '../asctions/actionTypes';\n\nconst initialState = {\n    ingredients: {\n        salad:0,\n        bacon:0,\n        cheese:0,\n        meat:0\n    },\n    totalPrice: 4,\n};\n\nconst INGREDIENT_PRICES = {\n    salad: 0.5,\n    cheese: 0.4,\n    meat: 1.3,\n    bacon: 0.7\n};\n\nconst reducer = (state = initialState, action) => { \n    switch (action.type) {\n        case actionType.ADD_INGREDIENTS:\n            return {\n                ...state,\n                ingredients:{\n                    ...state.ingredients,\n                    [action.ingredientName]:state.ingredients[action.ingredientName]+1,\n                },\n                totalPrice:state.totalPrice + INGREDIENT_PRICES[action.ingredientName]\n            };\n        case actionType.REMOVE_INGREDIENTS:\n            return {\n                ...state,\n                ingredients: {\n                    ...state.ingredients,\n                    [action.ingredientName]: state.ingredients[action.ingredientName] - 1,\n                },\n                totalPrice: state.totalPrice - INGREDIENT_PRICES[action.ingredientName]\n            };\n        default:\n            return state;\n    }\n};\n\nexport default reducer;"]},"metadata":{},"sourceType":"module"}