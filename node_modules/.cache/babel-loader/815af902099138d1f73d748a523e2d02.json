{"ast":null,"code":"import _defineProperty from \"/home/mojtaba/Desktop/Burgur_Builder/burgur_builder/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport * as actionType from '../actions';\nconst initialState = {\n  counter: 0\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actionType.INCREMENT:\n      {\n        const newState = Object.assign({}, state);\n        newState.counter = state.counter + 1;\n        return newState;\n      }\n      ;\n      break;\n\n    case actionType.ADD:\n      return _objectSpread({}, state, {\n        counter: state.counter + action.val\n      });\n      break;\n\n    case actionType.SUBTRACT:\n      return _objectSpread({}, state, {\n        counter: state.counter - action.val\n      });\n      break;\n\n    case actionType.DECREMENT:\n      return _objectSpread({}, state, {\n        counter: state.counter - 1\n      });\n      break;\n  }\n\n  return state;\n};\n\nexport default reducer;","map":{"version":3,"sources":["/home/mojtaba/Desktop/Burgur_Builder/burgur_builder/src/store/reducers/counter.js"],"names":["actionType","initialState","counter","reducer","state","action","type","INCREMENT","newState","Object","assign","ADD","val","SUBTRACT","DECREMENT"],"mappings":";;;;;;AAAA,OAAO,KAAKA,UAAZ,MAA4B,YAA5B;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,OAAO,EAAE;AADQ,CAArB;;AAIA,MAAMC,OAAO,GAAG,CAACC,KAAK,GAAGH,YAAT,EAAuBI,MAAvB,KAAkC;AAC9C,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKN,UAAU,CAACO,SAAhB;AAA2B;AACvB,cAAMC,QAAQ,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBN,KAAlB,CAAjB;AACAI,QAAAA,QAAQ,CAACN,OAAT,GAAmBE,KAAK,CAACF,OAAN,GAAgB,CAAnC;AACA,eAAOM,QAAP;AACH;AAAA;AAAE;;AACH,SAAKR,UAAU,CAACW,GAAhB;AAAqB,+BACdP,KADc;AAEjBF,QAAAA,OAAO,EAAEE,KAAK,CAACF,OAAN,GAAgBG,MAAM,CAACO;AAFf;AAGlB;;AACH,SAAKZ,UAAU,CAACa,QAAhB;AAA0B,+BACnBT,KADmB;AAEtBF,QAAAA,OAAO,EAAEE,KAAK,CAACF,OAAN,GAAgBG,MAAM,CAACO;AAFV;AAGvB;;AACH,SAAKZ,UAAU,CAACc,SAAhB;AAA2B,+BACpBV,KADoB;AAEvBF,QAAAA,OAAO,EAAEE,KAAK,CAACF,OAAN,GAAgB;AAFF;AAGxB;AAjBP;;AAmBA,SAAOE,KAAP;AACH,CArBD;;AAuBA,eAAeD,OAAf","sourcesContent":["import * as actionType from '../actions'\n\nconst initialState = {\n    counter: 0,\n}\n\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case actionType.INCREMENT: {\n            const newState = Object.assign({}, state);\n            newState.counter = state.counter + 1;\n            return newState;\n        }; break;\n        case actionType.ADD: return {\n            ...state,\n            counter: state.counter + action.val,\n        }; break;\n        case actionType.SUBTRACT: return {\n            ...state,\n            counter: state.counter - action.val,\n        }; break;\n        case actionType.DECREMENT: return {\n            ...state,\n            counter: state.counter - 1,\n        }; break;\n    }\n    return state;\n};\n\nexport default reducer;"]},"metadata":{},"sourceType":"module"}