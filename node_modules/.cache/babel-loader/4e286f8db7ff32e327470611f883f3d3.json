{"ast":null,"code":"import _defineProperty from \"/home/mojtaba/Desktop/Burgur_Builder/burgur_builder/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport * as actionType from './actions';\nconst initialState = {\n  counter: 0,\n  result: []\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actionType.INCREMENT:\n      {\n        const newState = Object.assign({}, state);\n        newState.counter = state.counter + 1;\n        return newState;\n      }\n      ;\n      break;\n\n    case actionType.ADD:\n      return _objectSpread({}, state, {\n        counter: state.counter + action.val\n      });\n      break;\n\n    case actionType.SUBTRACT:\n      return _objectSpread({}, state, {\n        counter: state.counter - action.val\n      });\n      break;\n\n    case actionType.DECREMENT:\n      return _objectSpread({}, state, {\n        counter: state.counter - 1\n      });\n      break;\n\n    case actionType.STORE_RESULT:\n      return _objectSpread({}, state, {\n        result: state.result.concat({\n          id: new Date(),\n          value: state.counter\n        })\n      });\n      break;\n\n    case actionType.DELETE_RESULT:\n      {\n        // // const id =2\n        // const newArray=[...state.result];\n        // newArray.splice(id, 1);\n        const updatedArray = state.result.filter(result => result.id !== action.resultElId);\n        console.log(action.resultElId);\n        return _objectSpread({}, state, {\n          result: updatedArray\n        });\n      }\n  }\n\n  return state;\n};\n\nexport default reducer;","map":{"version":3,"sources":["/home/mojtaba/Desktop/Burgur_Builder/burgur_builder/src/store/reducer.js"],"names":["actionType","initialState","counter","result","reducer","state","action","type","INCREMENT","newState","Object","assign","ADD","val","SUBTRACT","DECREMENT","STORE_RESULT","concat","id","Date","value","DELETE_RESULT","updatedArray","filter","resultElId","console","log"],"mappings":";;;;;;AAAA,OAAO,KAAKA,UAAZ,MAA4B,WAA5B;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,OAAO,EAAE,CADQ;AAEjBC,EAAAA,MAAM,EAAE;AAFS,CAArB;;AAKA,MAAMC,OAAO,GAAG,CAACC,KAAK,GAAGJ,YAAT,EAAuBK,MAAvB,KAAkC;AAC9C,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKP,UAAU,CAACQ,SAAhB;AAA2B;AACvB,cAAMC,QAAQ,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBN,KAAlB,CAAjB;AACAI,QAAAA,QAAQ,CAACP,OAAT,GAAmBG,KAAK,CAACH,OAAN,GAAgB,CAAnC;AACA,eAAOO,QAAP;AACH;AAAA;AAAE;;AACH,SAAKT,UAAU,CAACY,GAAhB;AAAqB,+BACdP,KADc;AAEjBH,QAAAA,OAAO,EAAEG,KAAK,CAACH,OAAN,GAAgBI,MAAM,CAACO;AAFf;AAGlB;;AACH,SAAKb,UAAU,CAACc,QAAhB;AAA0B,+BACnBT,KADmB;AAEtBH,QAAAA,OAAO,EAAEG,KAAK,CAACH,OAAN,GAAgBI,MAAM,CAACO;AAFV;AAGvB;;AACH,SAAKb,UAAU,CAACe,SAAhB;AAA2B,+BACpBV,KADoB;AAEvBH,QAAAA,OAAO,EAAEG,KAAK,CAACH,OAAN,GAAgB;AAFF;AAGxB;;AACH,SAAKF,UAAU,CAACgB,YAAhB;AAA8B,+BACvBX,KADuB;AAE1BF,QAAAA,MAAM,EAAEE,KAAK,CAACF,MAAN,CAAac,MAAb,CAAoB;AAAEC,UAAAA,EAAE,EAAE,IAAIC,IAAJ,EAAN;AAAkBC,UAAAA,KAAK,EAAEf,KAAK,CAACH;AAA/B,SAApB;AAFkB;AAG3B;;AACH,SAAKF,UAAU,CAACqB,aAAhB;AAA+B;AAC3B;AACA;AACA;AAEA,cAAMC,YAAY,GAAGjB,KAAK,CAACF,MAAN,CAAaoB,MAAb,CAAoBpB,MAAM,IAAIA,MAAM,CAACe,EAAP,KAAcZ,MAAM,CAACkB,UAAnD,CAArB;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAYpB,MAAM,CAACkB,UAAnB;AACA,iCACOnB,KADP;AAEIF,UAAAA,MAAM,EAACmB;AAFX;AAKH;AAlCL;;AAoCA,SAAOjB,KAAP;AACH,CAtCD;;AAwCA,eAAeD,OAAf","sourcesContent":["import * as actionType from './actions'\n\nconst initialState = {\n    counter: 0,\n    result: [],\n}\n\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case actionType.INCREMENT: {\n            const newState = Object.assign({}, state);\n            newState.counter = state.counter + 1;\n            return newState;\n        }; break;\n        case actionType.ADD: return {\n            ...state,\n            counter: state.counter + action.val,\n        }; break;\n        case actionType.SUBTRACT: return {\n            ...state,\n            counter: state.counter - action.val,\n        }; break;\n        case actionType.DECREMENT: return {\n            ...state,\n            counter: state.counter - 1,\n        }; break;\n        case actionType.STORE_RESULT: return {\n            ...state,\n            result: state.result.concat({ id: new Date(), value: state.counter })\n        }; break;\n        case actionType.DELETE_RESULT: {\n            // // const id =2\n            // const newArray=[...state.result];\n            // newArray.splice(id, 1);\n\n            const updatedArray = state.result.filter(result => result.id !== action.resultElId)\n            console.log(action.resultElId);\n            return{\n                ...state,\n                result:updatedArray,\n            }\n            \n        }\n    }\n    return state;\n};\n\nexport default reducer;"]},"metadata":{},"sourceType":"module"}