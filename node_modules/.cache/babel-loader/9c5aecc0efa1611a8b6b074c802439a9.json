{"ast":null,"code":"import * as actionTypes from \"./actionTypes\";\nimport axios from \"axios\";\nexport const authStart = () => {\n  return {\n    type: actionTypes.AUTH_START\n  };\n};\nexport const authSuccess = (token, userId) => {\n  return {\n    type: actionTypes.AUTH_SUCCESS,\n    idToken: token,\n    userId: userId\n  };\n};\nexport const authFail = error => {\n  return {\n    type: actionTypes.AUTH_FAIL,\n    error: error\n  };\n};\nexport const logout = () => {\n  return {\n    type: actionTypes.AUTH_LOGOUT\n  };\n};\nexport const checkoutTimeout = expirationTime => {\n  return dispatch => {\n    setTimeout(() => {\n      dispatch(logout());\n    }, expirationTime * 1000);\n  };\n};\nexport const auth = (email, password, isSignup) => {\n  return dispatch => {\n    dispatch(authStart());\n    const authData = {\n      email: email,\n      password: password,\n      returnSecureToken: true\n    };\n    let url = \"https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyAfoD6o6Yl5KrNha2k7PjpmX8wwMZw6Q9Q\";\n\n    if (!isSignup) {\n      url = \"https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyAfoD6o6Yl5KrNha2k7PjpmX8wwMZw6Q9Q\";\n    }\n\n    axios.post(url, authData).then(response => {\n      console.log(response);\n      const expirationDate = new Date() + response;\n      localStorage.setItem('token', response.data.idToken);\n      localStorage.setItem('expirationDate');\n      dispatch(authSuccess(response.data.idToken, response.data.localId));\n      dispatch(checkoutTimeout(response.data.expiresIn));\n    }).catch(err => {\n      console.log(err.response.data.error.message);\n      dispatch(authFail(err.response.data.error.message));\n    });\n  };\n};\nexport const setAuthRedirectPath = path => {\n  return {\n    type: actionTypes.SET_AUTH_REDIRECT_PATH,\n    path: path\n  };\n};","map":{"version":3,"sources":["/home/mojtaba/Desktop/Burgur_Builder/burgur_builder/src/store/actions/auth.js"],"names":["actionTypes","axios","authStart","type","AUTH_START","authSuccess","token","userId","AUTH_SUCCESS","idToken","authFail","error","AUTH_FAIL","logout","AUTH_LOGOUT","checkoutTimeout","expirationTime","dispatch","setTimeout","auth","email","password","isSignup","authData","returnSecureToken","url","post","then","response","console","log","expirationDate","Date","localStorage","setItem","data","localId","expiresIn","catch","err","message","setAuthRedirectPath","path","SET_AUTH_REDIRECT_PATH"],"mappings":"AAAA,OAAO,KAAKA,WAAZ,MAA6B,eAA7B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAO,MAAMC,SAAS,GAAG,MAAM;AAC7B,SAAO;AACLC,IAAAA,IAAI,EAAEH,WAAW,CAACI;AADb,GAAP;AAGD,CAJM;AAMP,OAAO,MAAMC,WAAW,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC5C,SAAO;AACLJ,IAAAA,IAAI,EAAEH,WAAW,CAACQ,YADb;AAELC,IAAAA,OAAO,EAAEH,KAFJ;AAGLC,IAAAA,MAAM,EAAEA;AAHH,GAAP;AAKD,CANM;AAQP,OAAO,MAAMG,QAAQ,GAAGC,KAAK,IAAI;AAC/B,SAAO;AACLR,IAAAA,IAAI,EAAEH,WAAW,CAACY,SADb;AAELD,IAAAA,KAAK,EAAEA;AAFF,GAAP;AAID,CALM;AAOP,OAAO,MAAME,MAAM,GAAG,MAAM;AAC1B,SAAO;AACLV,IAAAA,IAAI,EAAEH,WAAW,CAACc;AADb,GAAP;AAGD,CAJM;AAMP,OAAO,MAAMC,eAAe,GAAGC,cAAc,IAAI;AAC/C,SAAOC,QAAQ,IAAI;AACjBC,IAAAA,UAAU,CAAC,MAAM;AACfD,MAAAA,QAAQ,CAACJ,MAAM,EAAP,CAAR;AACD,KAFS,EAEPG,cAAc,GAAC,IAFR,CAAV;AAGD,GAJD;AAKD,CANM;AAQP,OAAO,MAAMG,IAAI,GAAG,CAACC,KAAD,EAAQC,QAAR,EAAkBC,QAAlB,KAA+B;AACjD,SAAOL,QAAQ,IAAI;AACjBA,IAAAA,QAAQ,CAACf,SAAS,EAAV,CAAR;AACA,UAAMqB,QAAQ,GAAG;AACfH,MAAAA,KAAK,EAAEA,KADQ;AAEfC,MAAAA,QAAQ,EAAEA,QAFK;AAGfG,MAAAA,iBAAiB,EAAE;AAHJ,KAAjB;AAKA,QAAIC,GAAG,GACL,uGADF;;AAEA,QAAI,CAACH,QAAL,EAAe;AACbG,MAAAA,GAAG,GACD,mHADF;AAED;;AACDxB,IAAAA,KAAK,CACFyB,IADH,CACQD,GADR,EACaF,QADb,EAEGI,IAFH,CAEQC,QAAQ,IAAI;AAChBC,MAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AACA,YAAMG,cAAc,GAAG,IAAIC,IAAJ,KAAaJ,QAApC;AACAK,MAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BN,QAAQ,CAACO,IAAT,CAAc1B,OAA5C;AACAwB,MAAAA,YAAY,CAACC,OAAb,CAAqB,gBAArB;AACAjB,MAAAA,QAAQ,CAACZ,WAAW,CAACuB,QAAQ,CAACO,IAAT,CAAc1B,OAAf,EAAwBmB,QAAQ,CAACO,IAAT,CAAcC,OAAtC,CAAZ,CAAR;AACAnB,MAAAA,QAAQ,CAACF,eAAe,CAACa,QAAQ,CAACO,IAAT,CAAcE,SAAf,CAAhB,CAAR;AACD,KATH,EAUGC,KAVH,CAUSC,GAAG,IAAI;AACZV,MAAAA,OAAO,CAACC,GAAR,CAAYS,GAAG,CAACX,QAAJ,CAAaO,IAAb,CAAkBxB,KAAlB,CAAwB6B,OAApC;AACAvB,MAAAA,QAAQ,CAACP,QAAQ,CAAC6B,GAAG,CAACX,QAAJ,CAAaO,IAAb,CAAkBxB,KAAlB,CAAwB6B,OAAzB,CAAT,CAAR;AACD,KAbH;AAcD,GA3BD;AA4BD,CA7BM;AA+BP,OAAO,MAAMC,mBAAmB,GAAGC,IAAI,IAAI;AAClC,SAAO;AACLvC,IAAAA,IAAI,EAAEH,WAAW,CAAC2C,sBADb;AAELD,IAAAA,IAAI,EAAEA;AAFD,GAAP;AAID,CALD","sourcesContent":["import * as actionTypes from \"./actionTypes\";\nimport axios from \"axios\";\n\nexport const authStart = () => {\n  return {\n    type: actionTypes.AUTH_START\n  };\n};\n\nexport const authSuccess = (token, userId) => {\n  return {\n    type: actionTypes.AUTH_SUCCESS,\n    idToken: token,\n    userId: userId\n  };\n};\n\nexport const authFail = error => {\n  return {\n    type: actionTypes.AUTH_FAIL,\n    error: error\n  };\n};\n\nexport const logout = () => {\n  return {\n    type: actionTypes.AUTH_LOGOUT\n  };\n};\n\nexport const checkoutTimeout = expirationTime => {\n  return dispatch => {\n    setTimeout(() => {\n      dispatch(logout());\n    }, expirationTime*1000);\n  };\n};\n\nexport const auth = (email, password, isSignup) => {\n  return dispatch => {\n    dispatch(authStart());\n    const authData = {\n      email: email,\n      password: password,\n      returnSecureToken: true\n    };\n    let url =\n      \"https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyAfoD6o6Yl5KrNha2k7PjpmX8wwMZw6Q9Q\";\n    if (!isSignup) {\n      url =\n        \"https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyAfoD6o6Yl5KrNha2k7PjpmX8wwMZw6Q9Q\";\n    }\n    axios\n      .post(url, authData)\n      .then(response => {\n        console.log(response);\n        const expirationDate = new Date() + response\n        localStorage.setItem('token', response.data.idToken);\n        localStorage.setItem('expirationDate', )\n        dispatch(authSuccess(response.data.idToken, response.data.localId));\n        dispatch(checkoutTimeout(response.data.expiresIn));\n      })\n      .catch(err => {\n        console.log(err.response.data.error.message);\n        dispatch(authFail(err.response.data.error.message));\n      });\n  };\n};\n\nexport const setAuthRedirectPath = path => {\n         return {\n           type: actionTypes.SET_AUTH_REDIRECT_PATH,\n           path: path\n         };\n       };"]},"metadata":{},"sourceType":"module"}