{"ast":null,"code":"import _defineProperty from \"/home/mojtaba/Desktop/Burgur_Builder/burgur_builder/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport * as actionTypes from '../actions/actionTypes';\nconst initialState = {\n  ingredients: null,\n  totalPrice: 4,\n  error: false\n};\nconst INGREDIENT_PRICES = {\n  salad: 0.5,\n  cheese: 0.4,\n  meat: 1.3,\n  bacon: 0.7\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.ADD_INGREDIENTS:\n      return _objectSpread({}, state, {\n        ingredients: _objectSpread({}, state.ingredients, {\n          [action.ingredientName]: state.ingredients[action.ingredientName] + 1\n        }),\n        totalPrice: state.totalPrice + INGREDIENT_PRICES[action.ingredientName]\n      });\n\n    case actionTypes.REMOVE_INGREDIENTS:\n      return _objectSpread({}, state, {\n        ingredients: _objectSpread({}, state.ingredients, {\n          [action.ingredientName]: state.ingredients[action.ingredientName] - 1\n        }),\n        totalPrice: state.totalPrice - INGREDIENT_PRICES[action.ingredientName]\n      });\n\n    case actionTypes.SET_INGREDIENTS:\n      return _objectSpread({}, state, {\n        ingredients: {\n          salad: action.ingredients.salad,\n          bacon: action.ingredients.bacon,\n          cheese: action.ingredients.cheese,\n          meat: action.ingredients\n        },\n        error: false\n      });\n\n    case actionTypes.FETCH_INCREDIENTS_FAILED:\n      return _objectSpread({}, state, {\n        error: true\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/home/mojtaba/Desktop/Burgur_Builder/burgur_builder/src/store/reducers/burgerBuilder.js"],"names":["actionTypes","initialState","ingredients","totalPrice","error","INGREDIENT_PRICES","salad","cheese","meat","bacon","reducer","state","action","type","ADD_INGREDIENTS","ingredientName","REMOVE_INGREDIENTS","SET_INGREDIENTS","FETCH_INCREDIENTS_FAILED"],"mappings":";;;;;;AAAA,OAAO,KAAKA,WAAZ,MAA6B,wBAA7B;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,WAAW,EAAE,IADI;AAEjBC,EAAAA,UAAU,EAAE,CAFK;AAGjBC,EAAAA,KAAK,EAAE;AAHU,CAArB;AAMA,MAAMC,iBAAiB,GAAG;AACtBC,EAAAA,KAAK,EAAE,GADe;AAEtBC,EAAAA,MAAM,EAAE,GAFc;AAGtBC,EAAAA,IAAI,EAAE,GAHgB;AAItBC,EAAAA,KAAK,EAAE;AAJe,CAA1B;;AAOA,MAAMC,OAAO,GAAG,CAACC,KAAK,GAAGV,YAAT,EAAuBW,MAAvB,KAAkC;AAC9C,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKb,WAAW,CAACc,eAAjB;AACI,+BACOH,KADP;AAEIT,QAAAA,WAAW,oBACJS,KAAK,CAACT,WADF;AAEP,WAACU,MAAM,CAACG,cAAR,GAAyBJ,KAAK,CAACT,WAAN,CAAkBU,MAAM,CAACG,cAAzB,IAA2C;AAF7D,UAFf;AAMIZ,QAAAA,UAAU,EAAEQ,KAAK,CAACR,UAAN,GAAmBE,iBAAiB,CAACO,MAAM,CAACG,cAAR;AANpD;;AAQJ,SAAKf,WAAW,CAACgB,kBAAjB;AACI,+BACOL,KADP;AAEIT,QAAAA,WAAW,oBACJS,KAAK,CAACT,WADF;AAEP,WAACU,MAAM,CAACG,cAAR,GAAyBJ,KAAK,CAACT,WAAN,CAAkBU,MAAM,CAACG,cAAzB,IAA2C;AAF7D,UAFf;AAMIZ,QAAAA,UAAU,EAAEQ,KAAK,CAACR,UAAN,GAAmBE,iBAAiB,CAACO,MAAM,CAACG,cAAR;AANpD;;AAQJ,SAAKf,WAAW,CAACiB,eAAjB;AACI,+BACON,KADP;AAEIT,QAAAA,WAAW,EAAC;AACRI,UAAAA,KAAK,EAAEM,MAAM,CAACV,WAAP,CAAmBI,KADlB;AAERG,UAAAA,KAAK,EAAEG,MAAM,CAACV,WAAP,CAAmBO,KAFlB;AAGRF,UAAAA,MAAM,EAAEK,MAAM,CAACV,WAAP,CAAmBK,MAHnB;AAIRC,UAAAA,IAAI,EAAEI,MAAM,CAACV;AAJL,SAFhB;AAQIE,QAAAA,KAAK,EAAE;AARX;;AAUJ,SAAKJ,WAAW,CAACkB,wBAAjB;AACI,+BACOP,KADP;AAEIP,QAAAA,KAAK,EAAE;AAFX;;AAIJ;AACI,aAAOO,KAAP;AApCR;AAsCH,CAvCD;;AAyCA,eAAeD,OAAf","sourcesContent":["import * as actionTypes from '../actions/actionTypes';\n\nconst initialState = {\n    ingredients: null,\n    totalPrice: 4,\n    error: false,\n};\n\nconst INGREDIENT_PRICES = {\n    salad: 0.5,\n    cheese: 0.4,\n    meat: 1.3,\n    bacon: 0.7\n};\n\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case actionTypes.ADD_INGREDIENTS:\n            return {\n                ...state,\n                ingredients: {\n                    ...state.ingredients,\n                    [action.ingredientName]: state.ingredients[action.ingredientName] + 1,\n                },\n                totalPrice: state.totalPrice + INGREDIENT_PRICES[action.ingredientName]\n            };\n        case actionTypes.REMOVE_INGREDIENTS:\n            return {\n                ...state,\n                ingredients: {\n                    ...state.ingredients,\n                    [action.ingredientName]: state.ingredients[action.ingredientName] - 1,\n                },\n                totalPrice: state.totalPrice - INGREDIENT_PRICES[action.ingredientName]\n            };\n        case actionTypes.SET_INGREDIENTS:\n            return {\n                ...state,\n                ingredients:{\n                    salad: action.ingredients.salad,\n                    bacon: action.ingredients.bacon,\n                    cheese: action.ingredients.cheese,\n                    meat: action.ingredients\n                } ,\n                error: false,\n            };\n        case actionTypes.FETCH_INCREDIENTS_FAILED:\n            return {\n                ...state,\n                error: true,\n            }\n        default:\n            return state;\n    }\n};\n\nexport default reducer;"]},"metadata":{},"sourceType":"module"}