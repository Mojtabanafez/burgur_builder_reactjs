{"ast":null,"code":"import _defineProperty from \"/home/mojtaba/Desktop/Burgur_Builder/burgur_builder/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/home/mojtaba/Desktop/Burgur_Builder/burgur_builder/src/containers/Auth/Auth.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from 'react';\nimport Input from '../../components/UI/Input/Input';\nimport Button from '../../components/UI/Button/Button';\nimport classes from './Auth.module.css';\nimport * as actions from '../../store/actions/index';\nimport { connect } from 'react-redux';\nimport Spinner from '../../components/UI/Spinner/Spinner';\n\nclass Auth extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      controls: {\n        email: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'email',\n            placeholder: 'Mail Address'\n          },\n          vlaue: '',\n          validation: {\n            required: true,\n            isEmail: true\n          },\n          valid: false,\n          touched: false\n        },\n        password: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'password',\n            placeholder: 'Password'\n          },\n          vlaue: '',\n          validation: {\n            required: true,\n            minLength: 6\n          },\n          valid: false,\n          touched: false\n        }\n      },\n      isSignup: true\n    };\n\n    this.inputChangeHandler = (event, controlName) => {\n      const updatedControls = _objectSpread({}, this.state.controls, {\n        [controlName]: _objectSpread({}, this.state.controls[controlName], {\n          value: event.target.value,\n          valid: this.checkValidity(event.target.value, this.state.controls[controlName].validation),\n          touched: true\n        })\n      });\n\n      this.setState({\n        controls: updatedControls\n      });\n    };\n\n    this.submitHandler = event => {\n      event.preventDefault();\n      this.props.onAuth(this.state.controls.email.value, this.state.controls.password.value, this.state.isSignup);\n    };\n\n    this.switchAuthModeHandler = () => {\n      this.setState(prevState => {\n        return {\n          isSignup: !prevState.isSignup\n        };\n      });\n    };\n  }\n\n  checkValidity(value, rules) {\n    let isValid = true;\n\n    if (!rules) {\n      return true;\n    }\n\n    if (rules.required) {\n      isValid = value.trim() !== '' && isValid;\n    }\n\n    if (rules.minLength) {\n      isValid = value.length >= rules.minLength && isValid;\n    }\n\n    if (rules.maxLength) {\n      isValid = value.length <= rules.maxLength && isValid;\n    }\n\n    if (rules.isEmail) {\n      const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\n      isValid = pattern.test(value) && isValid;\n    }\n\n    if (rules.isNumeric) {\n      const pattern = /^\\d+$/;\n      isValid = pattern.test(value) && isValid;\n    }\n\n    return isValid;\n  }\n\n  render() {\n    const formElementsArray = [];\n\n    for (let key in this.state.controls) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.controls[key]\n      });\n    }\n\n    const form = formElementsArray.map(formElement => React.createElement(Input, {\n      key: formElement.id,\n      elementType: formElement.config.elementType,\n      elementConfig: formElement.config.elementConfig,\n      value: formElement.config.value,\n      invalid: !formElement.config.valid,\n      shouldValidate: formElement.config.validation,\n      touched: formElement.config.touched,\n      changed: event => this.inputChangeHandler(event, formElement.id),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }));\n    return React.createElement(\"div\", {\n      className: classes.Auth,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      onSubmit: this.submitHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, form, React.createElement(Button, {\n      btnType: \"Success\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, \"Submit\")), React.createElement(Button, {\n      clicked: this.switchAuthModeHandler,\n      btnType: \"Danger\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, \"SWITCH TO \", this.state.isSignup ? 'SIGNIN' : 'SIGNUP'));\n  }\n\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onAuth: (email, password, isSignup) => dispatch(actions.auth(email, password, isSignup))\n  };\n};\n\nmap;\nexport default connect(null, mapDispatchToProps)(Auth);","map":{"version":3,"sources":["/home/mojtaba/Desktop/Burgur_Builder/burgur_builder/src/containers/Auth/Auth.js"],"names":["React","Component","Input","Button","classes","actions","connect","Spinner","Auth","state","controls","email","elementType","elementConfig","type","placeholder","vlaue","validation","required","isEmail","valid","touched","password","minLength","isSignup","inputChangeHandler","event","controlName","updatedControls","value","target","checkValidity","setState","submitHandler","preventDefault","props","onAuth","switchAuthModeHandler","prevState","rules","isValid","trim","length","maxLength","pattern","test","isNumeric","render","formElementsArray","key","push","id","config","form","map","formElement","mapDispatchToProps","dispatch","auth"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Input from '../../components/UI/Input/Input';\nimport Button from '../../components/UI/Button/Button'\nimport classes from './Auth.module.css'\nimport * as actions from '../../store/actions/index'\nimport { connect } from 'react-redux'\nimport Spinner from '../../components/UI/Spinner/Spinner'\n\nclass Auth extends Component {\n    state = {\n        controls: {\n            email: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'email',\n                    placeholder: 'Mail Address',\n                },\n                vlaue: '',\n                validation: {\n                    required: true,\n                    isEmail: true\n                },\n                valid: false,\n                touched: false,\n            },\n\n            password: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'password',\n                    placeholder: 'Password',\n                },\n                vlaue: '',\n                validation: {\n                    required: true,\n                    minLength: 6\n                },\n                valid: false,\n                touched: false,\n            },\n        },\n        isSignup: true,\n    }\n\n\n    checkValidity(value, rules) {\n        let isValid = true;\n        if (!rules) {\n            return true;\n        }\n\n        if (rules.required) {\n            isValid = value.trim() !== '' && isValid;\n        }\n\n        if (rules.minLength) {\n            isValid = value.length >= rules.minLength && isValid\n        }\n\n        if (rules.maxLength) {\n            isValid = value.length <= rules.maxLength && isValid\n        }\n\n        if (rules.isEmail) {\n            const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\n            isValid = pattern.test(value) && isValid\n        }\n\n        if (rules.isNumeric) {\n            const pattern = /^\\d+$/;\n            isValid = pattern.test(value) && isValid\n        }\n        return isValid;\n    }\n\n\n    inputChangeHandler = (event, controlName) => {\n        const updatedControls = {\n            ...this.state.controls,\n            [controlName]: {\n                ...this.state.controls[controlName],\n                value: event.target.value,\n                valid: this.checkValidity(event.target.value, this.state.controls[controlName].validation),\n                touched: true\n            }\n        };\n        this.setState({ controls: updatedControls });\n    }\n    submitHandler = (event) => {\n        event.preventDefault();\n        this.props.onAuth(this.state.controls.email.value, this.state.controls.password.value, this.state.isSignup)\n    }\n    switchAuthModeHandler = () => {\n        this.setState(prevState => {\n            return { isSignup: !prevState.isSignup }\n        });\n    };\n    render() {\n        const formElementsArray = [];\n        for (let key in this.state.controls) {\n            formElementsArray.push({\n                id: key,\n                config: this.state.controls[key]\n            })\n        }\n        const form = formElementsArray.map(formElement => (\n            <Input\n                key={formElement.id}\n                elementType={formElement.config.elementType}\n                elementConfig={formElement.config.elementConfig}\n                value={formElement.config.value}\n                invalid={!formElement.config.valid}\n                shouldValidate={formElement.config.validation}\n                touched={formElement.config.touched}\n                changed={(event) => this.inputChangeHandler(event, formElement.id)}\n            />\n        ))\n\n        return (\n            <div className={classes.Auth}>\n                <form onSubmit={this.submitHandler}>\n                    {form}\n                    <Button btnType=\"Success\">Submit</Button>\n                </form>\n                <Button \n                clicked={this.switchAuthModeHandler}\n                btnType=\"Danger\">SWITCH TO {this.state.isSignup ? 'SIGNIN':'SIGNUP'}</Button>\n            </div>\n        );\n    }\n}\nconst mapDispatchToProps = dispatch => {\n    return {\n        onAuth: (email, password, isSignup) => dispatch(actions.auth(email, password, isSignup))\n    }\n}\nmap\n\nexport default connect(null, mapDispatchToProps)(Auth);"]},"metadata":{},"sourceType":"module"}