{"ast":null,"code":"import _defineProperty from \"/home/mojtaba/Desktop/Burgur_Builder/burgur_builder/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { randomBytes, randomFill } from \"crypto\";\nimport * as actionType from '../store';\nconst initialState = {\n  counter: 0,\n  result: []\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case 'INCREMENT':\n      {\n        const newState = Object.assign({}, state);\n        newState.counter = state.counter + 1;\n        return newState;\n      }\n      ;\n      break;\n\n    case 'ADD':\n      return _objectSpread({}, state, {\n        counter: state.counter + action.val\n      });\n      break;\n\n    case 'SUBTRACT':\n      return _objectSpread({}, state, {\n        counter: state.counter - action.val\n      });\n      break;\n\n    case 'DECREMENT':\n      return _objectSpread({}, state, {\n        counter: state.counter - 1\n      });\n      break;\n\n    case 'STORE_RESULT':\n      return _objectSpread({}, state, {\n        result: state.result.concat({\n          id: new Date(),\n          value: state.counter\n        })\n      });\n      break;\n\n    case 'DELETE_RESULT':\n      {\n        // // const id =2\n        // const newArray=[...state.result];\n        // newArray.splice(id, 1);\n        const updatedArray = state.result.filter(result => result.id !== action.resultElId); // return updatedArray;\n\n        console.log(action.resultElId);\n        return _objectSpread({}, state, {\n          result: updatedArray\n        });\n      }\n  }\n\n  return state;\n};\n\nexport default reducer;","map":{"version":3,"sources":["/home/mojtaba/Desktop/Burgur_Builder/burgur_builder/src/store/reducer.js"],"names":["randomBytes","randomFill","actionType","initialState","counter","result","reducer","state","action","type","newState","Object","assign","val","concat","id","Date","value","updatedArray","filter","resultElId","console","log"],"mappings":";;;;;;AAAA,SAASA,WAAT,EAAsBC,UAAtB,QAAwC,QAAxC;AACA,OAAO,KAAKC,UAAZ,MAA4B,UAA5B;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,OAAO,EAAE,CADQ;AAEjBC,EAAAA,MAAM,EAAE;AAFS,CAArB;;AAKA,MAAMC,OAAO,GAAG,CAACC,KAAK,GAAGJ,YAAT,EAAuBK,MAAvB,KAAkC;AAC9C,UAAQA,MAAM,CAACC,IAAf;AACI,SAAK,WAAL;AAAkB;AACd,cAAMC,QAAQ,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBL,KAAlB,CAAjB;AACAG,QAAAA,QAAQ,CAACN,OAAT,GAAmBG,KAAK,CAACH,OAAN,GAAgB,CAAnC;AACA,eAAOM,QAAP;AACH;AAAA;AAAE;;AACH,SAAK,KAAL;AAAY,+BACLH,KADK;AAERH,QAAAA,OAAO,EAAEG,KAAK,CAACH,OAAN,GAAgBI,MAAM,CAACK;AAFxB;AAGT;;AACH,SAAK,UAAL;AAAiB,+BACVN,KADU;AAEbH,QAAAA,OAAO,EAAEG,KAAK,CAACH,OAAN,GAAgBI,MAAM,CAACK;AAFnB;AAGd;;AACH,SAAK,WAAL;AAAkB,+BACXN,KADW;AAEdH,QAAAA,OAAO,EAAEG,KAAK,CAACH,OAAN,GAAgB;AAFX;AAGf;;AACH,SAAK,cAAL;AAAqB,+BACdG,KADc;AAEjBF,QAAAA,MAAM,EAAEE,KAAK,CAACF,MAAN,CAAaS,MAAb,CAAoB;AAAEC,UAAAA,EAAE,EAAE,IAAIC,IAAJ,EAAN;AAAkBC,UAAAA,KAAK,EAAEV,KAAK,CAACH;AAA/B,SAApB;AAFS;AAGlB;;AACH,SAAK,eAAL;AAAsB;AAClB;AACA;AACA;AAEA,cAAMc,YAAY,GAAGX,KAAK,CAACF,MAAN,CAAac,MAAb,CAAoBd,MAAM,IAAIA,MAAM,CAACU,EAAP,KAAcP,MAAM,CAACY,UAAnD,CAArB,CALkB,CAMlB;;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAYd,MAAM,CAACY,UAAnB;AACA,iCACOb,KADP;AAEIF,UAAAA,MAAM,EAACa;AAFX;AAKH;AAnCL;;AAqCA,SAAOX,KAAP;AACH,CAvCD;;AAyCA,eAAeD,OAAf","sourcesContent":["import { randomBytes, randomFill } from \"crypto\";\nimport * as actionType from '../store'\n\nconst initialState = {\n    counter: 0,\n    result: [],\n}\n\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case 'INCREMENT': {\n            const newState = Object.assign({}, state);\n            newState.counter = state.counter + 1;\n            return newState;\n        }; break;\n        case 'ADD': return {\n            ...state,\n            counter: state.counter + action.val,\n        }; break;\n        case 'SUBTRACT': return {\n            ...state,\n            counter: state.counter - action.val,\n        }; break;\n        case 'DECREMENT': return {\n            ...state,\n            counter: state.counter - 1,\n        }; break;\n        case 'STORE_RESULT': return {\n            ...state,\n            result: state.result.concat({ id: new Date(), value: state.counter })\n        }; break;\n        case 'DELETE_RESULT': {\n            // // const id =2\n            // const newArray=[...state.result];\n            // newArray.splice(id, 1);\n\n            const updatedArray = state.result.filter(result => result.id !== action.resultElId)\n            // return updatedArray;\n            console.log(action.resultElId);\n            return{\n                ...state,\n                result:updatedArray,\n            }\n            \n        }\n    }\n    return state;\n};\n\nexport default reducer;"]},"metadata":{},"sourceType":"module"}